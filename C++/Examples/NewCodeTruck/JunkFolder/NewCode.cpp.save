// standard includes
#include <cstdlib>
#include <sys/time.h>
#include <unistd.h>
#include <iostream>

// Navio2 includes

// barometer includes
#include "Navio/MS5611.h"
#include <cmath>

// RC Input includes
#include <Navio/RCInput.h>



using namespace std;

const bool dbmsg_global = false; // set flag to display all debug messages
bool dbmsg_local  = false; // change in the code at a specific location to view local messages only

//-------------------------------------------------------------------------------------------Loop timing (scheduler) Declarations

#define NUM_LOOPS  9
bool main_loop_active = true; // will bind this to an RC channel later for online tuning
struct timeval time_obj;
unsigned long long tse; // time since epoch (us)
unsigned long long time_start; // time from the beginning of current program executing (us)
unsigned long long time_now; // current time since the program starting executing (us)

//---------------------------------------------------------------------------------------------------------Barometer Declarations

int baro_step = 0; // declare the step counter (used to delay time from read to caclulate)
MS5611 barometer; // declare a new barometer object

// using the barometric equation in region 1 (valid for elevations up to 36,000ft)
// see wikipedia.org/wiki/Barometric_formula for more information
// using imperial units (some values use strange mixed units, Kelvin with imperial length?), has been tested and output looks ok
// CONSTANTS
const float Pb =  29.92126;    // static reference pressure for barometric equation (inHg)
const float Tb = 288.815;      // reference temperature for barometric equation (K) !!!not currently using this in the calculation
const float Lb =   -.0019812;  // standard temperature lapse rate (K/ft)
const float hb =   0.0;        // refernce height (ft), could be omitted but kept for generality
const float  R =   8.9494596e4;// universal gas constant (lbft^2)/(lbmolKs^2)
const float g0 =  32.17405;    // acceleration due to earth's gravity near the surface (ft/s^2)
const float  M =  28.9644;     // molar mass of earth's air (lb/lbmol)
// VARIABLES
float Tc  = 0.0; // temperature (C) <--read directly from sensor
float Tf  = 0.0; // temperature (F) <--this is not used for any calcs
float Tk  = 0.0; // temperature (K) <--converted for use in barometric equation
float Pm  = 0.0; // pressure (mbar) <--read directly from sensor
float Phg = 0.0; // pressure (inHg) <--converted for use in barometric equation
float msl = 0.0; // mean sea level altitue (ft) [should be close to 920ft for UMKC Flarsheim]

//----------------------------------------------------------------------------------------------------------RC Input Declarations
RCInput rcinput{};



int main()
{
	//-------------------------------------------------------------------------------------------Loop timing (scheduler) Initialization
	// initialize the time variables
	gettimeofday(&time_obj, NULL);
	tse          = time_obj.tv_sec*1000000LL + time_obj.tv_usec; // time since epoch (us)
	//tse        = time_obj.tv_sec*1000LL + time_obj.tv_usec/1000; // time since epoch (ms)
	time_start = tse; // time since epoch (ms), will be used to calculate time since start (beginning at 0us)

	// declare the scheduler frequencies
	cout << "Establishing loop frequencies.........." << endl;
	const int frequency [NUM_LOOPS] = {1000,500,200,100,50,20,10,5,1}; //Hz
	long long duration [NUM_LOOPS]; // will store the expected time since last execution for a given loop
	int timer [NUM_LOOPS]; // will store the time since the last execution in a given loop
	int watcher [NUM_LOOPS]; // will be used for debugging

	// calculate the scheduler us delay durations and populate the timer array with zeros
	cout << "Calculating loop delay durations......." << endl;
	cout << "Populating loop timers................." << endl;
	for(int i = 0 ; i < NUM_LOOPS ; i++)
	{
		duration[i] = 1000000/frequency[i];
		//duration[i] = 1000/frequency[i];
		if(dbmsg_global || dbmsg_local){cout << "Frequency is " << frequency[i] << "(Hz), duration is " << duration[i] << "(us)"<< endl;}
		timer[i] = 0;
		if(dbmsg_global || dbmsg_local){cout << "Timer is set to " << timer[i] << "(us), should all be zero" << endl;}
		watcher[i] = 0;
	}

	//---------------------------------------------------------------------------------------------------------Barometer Initialization
	barometer.initialize();

	//----------------------------------------------------------------------------------------------------------RC Input Initialization
	rcinput.init();
	int rc_array [rcinput.channel_count]; // array for holding the values which are read from the controller



	while(main_loop_active)
	{
		// refresh time now to prepare for another loop execution
		gettimeofday(&time_obj, NULL); // must first update the time_obj
		//tse        = time_obj.tv_sec*1000LL + time_obj.tv_usec/1000; // update tse (ms)
		tse        = time_obj.tv_sec*1000000LL + time_obj.tv_usec; // update tse (us)
		time_now   = tse - time_start; // calculate the time since execution start by subtracting off tse

		if( (time_now-timer[0]) > duration[0])
		{

			// Debug message, these slow down execution considerably
			// with messages enabled this loop may not operate at the expected frequency
			if(dbmsg_global || dbmsg_local) {cout << "This is the " << frequency[0] << "(Hz) loop." << endl
				<< "Expected time since last execution " << duration[0]
				<< "(us), Actual time since last execution " << time_now-timer[0] << "(us)" << endl;}
			watcher[0] = time_now - timer[0]; // used to check loop frequency
			timer[0] = time_now;
		}

		if( (time_now-timer[1]) > duration[1])
		{

			// Debug message, these slow down execution considerably
			// with messages enabled this loop may not operate at the expected frequency
			if(dbmsg_global || dbmsg_local) {cout << "This is the " << frequency[1] << "(Hz) loop." << endl
				<< "Expected time since last execution " << duration[1]
				<< "(us), Actual time since last execution " << time_now-timer[1] << "(us)" << endl;}
			watcher[1] = time_now - timer[1]; // used to check loop frequency
			timer[1] = time_now;
		}

		if( (time_now-timer[2]) > duration[2])
		{


			// Debug message, these slow down execution considerably
			// with messages enabled this loop may not operate at the expected frequency
			if(dbmsg_global || dbmsg_local) {cout << "This is the " << frequency[2] << "(Hz) loop." << endl
				<< "Expected time since last execution " << duration[2]
				<< "(us), Actual time since last execution " << time_now-timer[2] << "(us)" << endl;}
			watcher[2] = time_now - timer[2]; // used to check loop frequency
			timer[2] = time_now;
		}

		if( (time_now-timer[3]) > duration[3])
		{

			//-------------------------------------------------------------------------------------------------------------Barometer Read
			if(baro_step == 0){
				barometer.refreshPressure();}
			else if(baro_step == 1){
				barometer.readPressure();}
			else if(baro_step == 2){
				barometer.refreshTemperature();}
			else if(baro_step == 3){
				barometer.readTemperature();}
			else if(baro_step == 4){
				barometer.calculatePressureAndTemperature();
				//cout << "baro update complete, current time: " << time_now << "(us)" << endl; // full update every 0.04s
				baro_step = -1;}
			else{
				cout << "improper barometer step, pressure may be incorrect" << endl;}
			baro_step++; // increment the step

			//--------------------------------------------------------------------------------------------------------------RC Input Read
			for(int i = 0 ; i < rcinput.channel_count ; i++ )
			{
				rc_array[i] = rcinput.read(i); // read in each value using the private class function (converts to int automatically)
				if(dbmsg_global || dbmsg_local) {cout << "Channel Number: " << i << " Channel Value: "  << rc_array[i] << endl;}
			}




			// Debug message, these slow down execution considerably
			// with messages enabled this loop may not operate at the expected frequency
			if(dbmsg_global || dbmsg_local) {cout << "This is the " << frequency[3] << "(Hz) loop." << endl
				<< "Expected time since last execution " << duration[3]
				<< "(us), Actual time since last execution " << time_now-timer[3] << "(us)" << endl;}
			watcher[3] = time_now - timer[3]; // used to check loop frequency
			timer[3] = time_now;
		}

		if( (time_now-timer[4]) > duration[4])
		{
			//-------------------------------------------------------------------------------------------------------------Barometer Calc
			// barometer does full update at 25Hz, no need to do the full altitude calculation any faster than 50Hz
			Tc  = barometer.getTemperature(); // temperature from sensor (C), value is recorded at surface of PCB, (higher than ambient!)
			Tk  = Tc + 273.15; // convert to Kelvin (needed for barometric formula
			Tf  = Tc * (9.0/5.0) + 32; // convert to Fahrenheit (uncomment for sanity check but it is not used for any calcs)
			Pm  = barometer.getPressure(); // pressure is natively given in mbar
			Phg = Pm*.02953; // convert to inHg
			// barometric equation
			msl = hb + (Tk/Lb)*(pow((Phg/Pb),((-R*Lb)/(g0*M)))-1); // NOTE: using local Tk instead of standard temperature (Tb)
//dbmsg_local = true;
			if( dbmsg_global || dbmsg_local) {cout << "Barometer Check (at 50Hz), Temp (C,K,F): " << Tc << " " << Tk << " " << Tf << " "
				<< "Pressure (mbar, inHg): " << Pm << " " << Phg << " Altitude MSL (ft): " << msl << endl;}
//dbmsg_local = false;

			// Debug message, these slow down execution considerably
			// with messages enabled this loop may not operate at the expected frequency
			if(dbmsg_global || dbmsg_local) {cout << "This is the " << frequency[4] << "(Hz) loop." << endl
				<< "Expected time since last execution " << duration[4]
				<< "(us), Actual time since last execution " << time_now-timer[4] << "(us)" << endl;}
			watcher[4] = time_now - timer[4]; // used to check loop frequency
			timer[4] = time_now;
		}


		if( (time_now-timer[5]) > duration[5])
		{


			// Debug message, these slow down execution considerably
			// with messages enabled this loop may not operate at the expected frequency
			if(dbmsg_global || dbmsg_local) {cout << "This is the " << frequency[5] << "(Hz) loop." << endl
				<< "Expected time since last execution " << duration[5]
				<< "(us), Actual time since last execution " << time_now-timer[5] << "(us)" << endl;}
			watcher[5] = time_now - timer[5]; // used to check loop frequency
			timer[5] = time_now;
		}

		if( (time_now-timer[6]) > duration[6])
		{


			// Debug message, these slow down execution considerably
			// with messages enabled this loop may not operate at the expected frequency
			if(dbmsg_global || dbmsg_local) {cout << "This is the " << frequency[6] << "(Hz) loop." << endl
				<< "Expected time since last execution " << duration[6]
				<< "(us), Actual time since last execution " << time_now-timer[6] << "(us)" << endl;}
			watcher[6] = time_now - timer[6]; // used to check loop frequency
			timer[6] = time_now;
		}

		if( (time_now-timer[7]) > duration[7])
		{


			// Debug message, these slow down execution considerably
			// with messages enabled this loop may not operate at the expected frequency
			if(dbmsg_global || dbmsg_local) {cout << "This is the " << frequency[7] << "(Hz) loop." << endl
				<< "Expected time since last execution " << duration[7]
				<< "(us), Actual time since last execution " << time_now-timer[7] << "(us)" << endl;}
			watcher[7] = time_now - timer[7]; // used to check loop frequency
			timer[7] = time_now;
		}

		if( (time_now-timer[8]) > duration[8])
		{

			//Standard Output Message, shows up if other debug messages are off
			if(!dbmsg_global && !dbmsg_local)
			{
				//cout << "This is a single line ";
				cout << "			}

//dbmsg_local = true;
			if(dbmsg_global || dbmsg_local)
			{
				// Alternate debug message, just print out the most current duration for each loop occasionally
				cout << "Printing the most current expected vs. actual time since last execution for each loop" << endl;
				for(int i = 0 ; i < NUM_LOOPS ; i++)
				{
					cout << "For " << frequency[i] << "(Hz) loop, expected: " << duration[i] << "(us), actual: " << watcher[i] << endl;
				}
			}
//dbmsg_local = false;
			// Debug message, these slow down execution considerably
			// with messages enabled this loop may not operate at the expected frequency
			if(dbmsg_global || dbmsg_local) {cout << "This is the " << frequency[8] << "(Hz) loop." << endl
				<< "Expected time since last execution " << duration[8]
				<< "(us), Actual time since last execution " << time_now-timer[8] << "(us)" << endl;}
			watcher[8] = time_now - timer[8]; // used to check loop frequency
			timer[8] = time_now;
		}

	}







	return 0;
}
